#+TITLE: Meuporg-mode
#+DESCRIPTION: The litterate code of the meuporg-mode.
#+AUTHOR: LÃ©o Perrin <leoperrin@picarresursix.fr>
#+DATE: Time-stamp: <2013-04-27 22:16:42 leo>
#+STARTUP: hidestars indent



* Introduction
  Meuporg supports two file format for the main file, markdown and
  org. However, org is the one to prefer to leverage all of its power:
  it was intended to be used with emacs.

  Therefore, a minor-mode providing hopefully useful shortcuts is
  provided. It gives functions allowing to:
    + Easily insert items often used items.
    + Fontify them
    + Update a main file.
    + Go to the main file of which a files depends.

** This file
This is literate programming using org-babel, so open this file with
emacs. To edit a snippet of code, use /C-c '/ to open a new frame in
the correct mode and /C-c '/ again to close it. To create the source
file (an operation called "tangling"), use /C-c C-v f/.

** Licence
Meuporg is released under a GPL licence.
#+BEGIN_SRC lisp :tangle meuporg.el
;;; meuporg.el --- Provides shortcuts for easier use of meup!org.

;; Copyright (C) 2012 Leo Perrin
;;
;; Author: Leo "picarresursix" Perrin <leoperrin@picarresursix.fr>
;; Created: 2012-12-20
;; Version: 0.9
;; Keywords: project management, data centralisation
;; URL: https://github.com/picarresursix/meuporg
;; Compatibility:  GNU Emacs 24.x
;;
;; This file is NOT part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;
#+END_SRC

** Usage
#+BEGIN_SRC lisp :tangle meuporg.el
;;; Commentary:
;;
;; Move this file somewhere in your emacs load-path. Then, add the following
;; to your .emacs file:
;; 
;; (load-file meuporg.el)
;; 
;;; Issues:
;;
;;; TODO:
;; 
;;; Change Log:
;;
;;; Code:
#+END_SRC
* The meuporg command
Meuporg is not a "real" executable somewhere in the $PATH so we must
tell emacs the command to run to use it.
#+begin_src lisp :tangle meuporg.el
  (setq meuporg-command "python2.7 ~/.meuporg ")
#+end_src
* Update main file
This function is very straightforward: we run the shell command
"meuporg -u" after saving the current buffer.
#+begin_src lisp :tangle meuporg.el
  (defun meuporg-reload()
    "Reload the current meuporg main file after saving all buffers."
    (interactive)
    (save-some-buffers t)
    (shell-command (concat meuporg-command " -u"))
    (if (get-buffer "meup.*org.*")
        (revert-buffer "meup.*org.*")))
#+end_src
* Opening the main file
** meuporg-find-main
    This function goes up in the directory tree until it finds a
    meuporg.org file in one of the parent directories. Then, it
    returns the path to the said file or an empty string if it didn't
    find any.

    Actually, we just use the output of "meuporg -f" but, to retrieve
    it, we need to get the content of the "*Shell Command Output*"
    buffer (and remove the last character, a new line). Then, we move
    back to the buffer where we were and, to be able to do so, we
    first store the said buffer in a variable.
    #+begin_src lisp :tangle meuporg.el
      (defun meuporg-find-main()
        "Returns the path to meuporg of which the current file depends or an
      empty string if there is no such meuporg."
        (setq old-buffer (current-buffer))
        (shell-command (concat meuporg-command " -f"))
        (switch-to-buffer "*Shell Command Output*")
        (setq path-to-main-meuporg
              (buffer-substring-no-properties (point-min) (- (point-max) 1)))
        (switch-to-buffer old-buffer)
        (kill-buffer "*Shell Command Output*")
        path-to-main-meuporg)
    #+end_src
** meuporg-open-main
    Opens the main file of which the current file depends using the
    output of meuporg-find-main. If there is no such buffer, does
    nothing.
    #+begin_src lisp :tangle meuporg.el
      (defun meuporg-open-main()
        "Open the meuporg of which the current file depends (if any)."
        (interactive)
        (setq path-to-main-meuporg (meuporg-find-main))
        (if (< 2 (length path-to-main-meuporg))
            (progn
              (find-file path-to-main-meuporg)
              (message (concat "Opening " path-to-main-meuporg)))
            (message "No meuporg found.")))
    #+end_src
* Interacting with items in a file
   Items live in "regular" file, i.e. those I actually work with: .c,
   .cpp, .tex, .py, etc. Thus, I want to interact with items all the
   time: inserting them and locating them easily.
** meuporg-insert-item
    We want common items to be easy to insert, so we create smalls
    functions to quickly put any item where the cursor is. Nothing
    fancy, it just an interactive call to "insert".
    #+begin_src lisp :tangle meuporg.el
      (defun meuporg-insert-idea()
        "Inserts an IDEA meuporg item."
        (interactive)
        (insert "!IDEA! "))

      (defun meuporg-insert-todo()
        "Inserts a TODO meuporg item."
        (interactive)
        (insert "!TODO! "))

      (defun meuporg-insert-continue()
        "Inserts a TOCHECK meuporg item."
        (interactive)
        (insert "!CONTINUE! "))

      (defun meuporg-insert-tocheck()
        "Inserts a TOCHECK meuporg item."
        (interactive)
        (insert "!TOCHECK! "))

      (defun meuporg-insert-polish()
        "Inserts a TOCHECK meuporg item."
        (interactive)
        (insert "!POLISH! "))

      (defun meuporg-insert-fixref()
        "Inserts a FIXREF meuporg item."
        (interactive)
        (insert "!FIXREF! "))
    #+end_src
** meuporg-go-to-next-item
    If there is another item further in the file, moves the cursor to
    it (see [[http://curiousprogrammer.wordpress.com/2009/06/08/error-handling-in-emacs-lisp/][this blog post]] for info about error handling).
    #+begin_src lisp :tangle meuporg.el
      (defun meuporg-go-to-next-item()
        (interactive)
        (condition-case ex
            (search-forward-regexp "\![a-zA-Z0-9_]*\!")
          ('error
           (message "No items after cursor."))))
    #+end_src
** meuporg-go-to-previous-item
    The same as before, but for what is before in the file.
    #+begin_src lisp :tangle meuporg.el
      (defun meuporg-go-to-previous-item()
        (interactive)
        (condition-case ex
            (search-backward-regexp "\![a-zA-Z0-9_]*\!")
          ('error
           (message "No items before cursor."))))
    #+end_src
** meuporg-toggle-item-highlighting
Use [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Highlight-Interactively.html][hi-lock-mode]].
* List and jump to items in a file
The search of items in a file and the navigation among them relies on
the `loccur` elisp function. The idea is to use it to locate all items
or only those corresponding to the structure.

All this requires loccur and the loccur-no-highlight function, so I
recommend of course my [[https://github.com/picarresursix/loccur/][fork]] of it.

** meuporg-list-items-in-buffer
We add some functions using the loccur to search for (possibly
particular) items.
#+begin_src lisp :tangle meuporg.el
  (defun meuporg-list-items-in-buffer()
    "Lists the items in the current buffer and displays only them."
    (interactive)
    (loccur-no-highlight "![A-Za-z0-9_]+!")
    )
  
  (defun meuporg-list-specific-items-in-buffer()
    "Prompts for a string and lists all the items in the file whose name
  contains the said string."
    (interactive)
    (setq pattern
          (read-from-minibuffer "Search for items whose names contain: "))
    (loccur-no-highlight (concat "![A-zA-Z0-9]*" pattern "[A-zA-Z0-9]*!"))
    )
  
  (defun meuporg-list-structure-of-buffer()
    "Searches for items with \"SECTION\" in their name and displays
  them."
    (interactive)
    (loccur-no-highlight "![A-Za-z0-9_]*SECTION!")
    )
  
#+end_src
* meuporg-mode
** minor-mode declaration
We want to define a minor-mode granting access to the keybindings
and the fontifying of known items. To do so, we apply what is
suggested [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Minor-Modes.html#Defining-Minor-Modes][here]]. The keymap had to employ a backquote and commas,
take a look at [[http://stackoverflow.com/questions/3115104/how-to-create-keybindings-for-a-custom-minor-mode-in-emacs][stackoverflow]] to see why.

In order to be able to use the key "C-!" as the prefix, we first
had to undefine this key.
#+begin_src lisp :tangle meuporg.el
  (global-unset-key (kbd "C-!"))
  
  (define-minor-mode meuporg-mode
      "Toggle meuporg mode.
  
    Interactively with no argument, this command toggles the mode.
    A positive prefix argument enables the mode, any other prefix
    argument disables it.  From Lisp, argument omitted or nil enables
    the mode, `toggle' toggles the state. "
     ;; The initial value.
     :init-value nil
     ;; The indicator for the mode line.
     :lighter " !M!"
     :keymap
     `(
       (,(kbd "C-! u")   . meuporg-reload)
       (,(kbd "C-! m")   . meuporg-open-main)
       (,(kbd "C-! n")   . meuporg-go-to-next-item)
       (,(kbd "C-! p")   . meuporg-go-to-previous-item)
       (,(kbd "C-! l")   . meuporg-list-items-in-buffer)
       (,(kbd "C-! s")   . meuporg-list-specific-items-in-buffer)
       (,(kbd "C-! t")   . meuporg-list-structure-of-buffer)
       (,(kbd "C-! q")   . meuporg-kill-item-list)
       (,(kbd "C-! i i") . meuporg-insert-idea)
       (,(kbd "C-! i t") . meuporg-insert-todo)
       (,(kbd "C-! i c") . meuporg-insert-continue)
       (,(kbd "C-! i h") . meuporg-insert-tocheck)
       (,(kbd "C-! i p") . meuporg-insert-polish)
       (,(kbd "C-! i f") . meuporg-insert-fixref)))
#+end_src

** Fontifying
Now that we have a minor-mode, we add fontifying for the
items. Items are strings containing non-space character enclosed
between exclamation marks, so we look for this pattern.
#+begin_src lisp :tangle meuporg.el
  (add-hook 'meuporg-mode-hook
            (lambda ()
              (font-lock-add-keywords
               nil
               '(("!\\([a-zA-Z0-9_]*\\)!" 1 font-lock-warning-face t)))))
#+end_src

** Adding a hook to turn on the mode
We want the meuporg minor-mode to be switched on whenever a file
is on the directory tree below a meuporg. To do so, we check that
the output of meuporg-find-main has a greater than 1 length.
#+begin_src lisp :tangle meuporg.el
  (add-hook 'find-file-hook
            (lambda()
              (if (< 1 (length (meuporg-find-main)))
                  (meuporg-mode))))
#+end_src
* Wrapping up
#+BEGIN_SRC lisp :tangle meuporg.el
;;; meuporg.el ends here
#+END_SRC
