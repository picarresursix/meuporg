#+TITLE: Meup.org
#+DESCRIPTION: Python script to get things done
#+AUTHOR: LÃ©o "pi^2/6" Perrin <leoperrin@picarresursix.fr>
#+DATE: Time-stamp: <2013-01-26 15:43:11 leo>
#+STARTUP: hidestars indent align





* Project description
** Files to include
The directories containing the following regexp's will be the *only
ones* included. See the [[http://docs.python.org/2/howto/regex.html#matching-characters][Python re documentation]] to know how regex's
are read. Use spaces to separate them.

INCLUDE:

** Files to exclude
The directories whose name contains the following regex's will not be
taken into account when updating this main file. See the Python re
[[http://docs.python.org/2/howto/regex.html#matching-characters][documentation]] to know how regex's are read. Use spaces to separate
them.

EXCLUDE: pdf pyc test el png

** Include backup files
If set to "YES", backup files will be included when parsing the file.

INCLUDE_BACKUP_FILES: NO

** Include hidden files
If set to "YES", backup files will be included when parsing the file.

INCLUDE_HIDDEN_FILES: NO

* Actual items (REAL)
Due to the fact that items are everywhere in this program, I use a
specific one (REAL) to know where the modifications I have to make
are.
** Items
* General ideas (REALIDEA)
** Add one layer of abstraction
Do not have a fixed syntax for the tags but allow dynamic creation.
Example: meuporg -o . -s "![A-zA-Z0-9]+!"  This would be the same as
"meuporg -o ." but it would also allow searching for specific tags (in
case usual ones are not allowed, or another structure was already)
in use.
(s: Search.)
** Items
* [0/1] python (python)
The aim of this script is to list the items in a directory, to sort
them, to present them in a nice way and to update a file using them.
** Useful links
*** [[http://docs.python.org/2/howto/regex.html][Documentation]] of the re module for regexps in python
*** [[http://docs.python.org/2/library/os.path.html][Documentation]] of the os.path module for python
*** [[** TODO Implement statistics][Documentation]] of the argparse module
** TODO Add time-stamp
Python code to print time-stamp:
#+begin_src python
  import datetime
  print datetime.datetime.today().strftime("%A, %d. %B %Y %I:%M%p")
#+end_src
output: "Friday, 25. January 2013 09:50AM".
* [1/1] Documentation (doc)
** DONE [[file:doc/description.org][description.org]]
CLOSED: [2013-01-24 jeu. 12:39]
* [0/1] emacs
A minor-mode providing an interface to easily use items in text files
and to call the python script directly from emacs. It is written using
literate programming with org-babel.
** [[file:emacs-mode/meuporg-mode.org][meuporg-mode.org]] (code file)
** Links used
*** Have buttons? [[http://stackoverflow.com/questions/7696208/emacs-lisp-how-to-add-to-link-hyperlink-to-another-file-just-like-that-in-h-e][example]]
*** Open buffer in new frame: [[http://ftp.gnu.org/old-gnu/Manuals/elisp-manual-21-2.8/html_node/elisp_433.html][pop-to-buffer]]
*** Obtain the full path to the current file
The lisp code is
#+begin_src el
 (expand-file-name (buffer-file-name))
#+end_src
I built it from the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-File-Name.html][buffer file name documentation]] and the
[[http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Expansion.html#File-Name-Expansion][file name documentation]].
*** Concept of [[http://www.chemie.fu-berlin.de/chemnet/use/info/elisp/elisp_28.html][excursion]].
*** Remove the read-only property of a buffer to modify it
[[http://www.chemie.fu-berlin.de/chemnet/use/info/elisp/elisp_25.html#SEC360][source]].
#+begin_src lisp
  (setq inhibit-read-only t)
#+end_src

*** Save all the buffers
[[http://www.chemie.fu-berlin.de/chemnet/use/info/elisp/elisp_23.html#SEC323][source]]
** TODO [1/2] Modify the meuporg-item-list-mode
*** TODO Add saving of all buffers when updating main file.
*** DONE Add function to list only a particular item.
CLOSED: [2013-01-26 sam. 13:39]
